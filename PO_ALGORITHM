#include <Wire.h>
#include <Adafruit_INA260.h>

Adafruit_INA260 ina260 = Adafruit_INA260();

// PWM Configuration
#define PWM_PIN 9
#define PWM_FREQ 20000
#define PRESCALER 1
#define TOP_VALUE (F_CPU / (PRESCALER * PWM_FREQ) - 1)

// MPPT Parameters
#define STEP_SIZE 1      // Adjustment step size (1-5)
#define SAMPLE_DELAY 50  // Stabilization time after adjustment (ms)

volatile int currentDuty = TOP_VALUE / 2;  // Start at 50% duty
float prevPower = 0;
bool increasing = true;

void setup() {
  Serial.begin(115200);
  pinMode(PWM_PIN, OUTPUT);

  // Initialize PWM Timer
  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1A |= (1 << COM1A1) | (1 << WGM11);
  TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS10);
  ICR1 = TOP_VALUE;
  OCR1A = currentDuty;

  // Initialize INA260
  if (!ina260.begin()) {
    Serial.println("Couldn't find INA260");
    while (1);
  }
}

void loop() {
  // Read voltage and current
  float voltage = ina260.readBusVoltage();
  float current = ina260.readCurrent();
  float power = voltage * current;

  // Perturb and Observe Algorithm
  if (power > prevPower) {
    // Keep moving in same direction
    currentDuty += increasing ? STEP_SIZE : -STEP_SIZE;
  } else {
    // Reverse direction
    increasing = !increasing;
    currentDuty += increasing ? STEP_SIZE : -STEP_SIZE;
  }

  // Ensure duty stays within bounds
  currentDuty = constrain(currentDuty, 0, TOP_VALUE);
  
  // Update PWM and store power
  OCR1A = currentDuty;
  prevPower = power;

  // Add debug output
  Serial.print("Voltage: "); Serial.print(voltage, 2); Serial.print("V\t");
  Serial.print("Current: "); Serial.print(current, 2); Serial.print("A\t");
  Serial.print("Power: "); Serial.print(power, 2); Serial.print("W\t");
  Serial.print("Duty: "); Serial.println(map(currentDuty, 0, TOP_VALUE, 0, 1000)/10.0, 1);

  delay(SAMPLE_DELAY);
}
